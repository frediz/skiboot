Description: Fix needed for -Werror
 On debian, additionnal compilation flags are added such as -Werror which
 make compilation fail. So :
 - checking function return codes so that the compilation doesn't fail.
 - moving 'largest' so that gcc always sees it with a value.

--- a/external/opal-prd/opal-prd.c
+++ b/external/opal-prd/opal-prd.c
@@ -707,7 +707,11 @@
 		return;
 	}
 
-	ftruncate(fd, 0);
+	if (ftruncate(fd, 0) < 0) {
+		pr_log(LOG_NOTICE, "IMAGE: couldn't truncate image %s for writing",
+				dump_name);
+		return;
+	}
 	rc = write(fd, ctx->code_addr, ctx->code_size);
 	close(fd);
 
@@ -772,8 +776,17 @@
 	__be64 *reg;
 	void *buf;
 
-	asprintf(&label_path, "%s/%s/ibm,prd-label", path, dirent->d_name);
-	asprintf(&reg_path, "%s/%s/reg", path, dirent->d_name);
+	rc = asprintf(&label_path, "%s/%s/ibm,prd-label", path, dirent->d_name);
+	if (rc < 0) {
+		pr_log(LOG_ERR, "FW: error creating 'ibm,prd-label' path "
+			 	"node: %m");
+		return -1;
+	}
+	if (asprintf(&reg_path, "%s/%s/reg", path, dirent->d_name) < 0) {
+		pr_log(LOG_ERR, "FW: error creating 'reg' path "
+				" node: %m");
+		return -1;
+	}
 
 	reg = NULL;
 	label = NULL;
@@ -825,7 +838,11 @@
 	DIR *dir;
 	int rc = -1;
 
-	asprintf(&path, "%s/reserved-memory", devicetree_base);
+	if (asprintf(&path, "%s/reserved-memory", devicetree_base) < 0) {
+		pr_log(LOG_ERR, "FW: error creating 'reserved-memory' path "
+				"node: %m");
+		return -1;
+	}
 
 	dir = opendir(path);
 	if (!dir) {
--- a/external/opal-prd/pnor.c
+++ b/external/opal-prd/pnor.c
@@ -139,7 +139,12 @@
 			goto out;
 		}
 
-		read(fd, buf, pnor->erasesize);
+		rc = read(fd, buf, pnor->erasesize);
+		if (rc < 0) {
+			pr_log(LOG_ERR, "PNOR: read(0x%x bytes) failed: %m",
+					pnor->erasesize);
+			goto out;
+		}
 	}
 
 	if (end_waste)  {
@@ -154,7 +159,12 @@
 			goto out;
 		}
 
-		read(fd, buf + write_len - pnor->erasesize, pnor->erasesize);
+		rc = read(fd, buf + write_len - pnor->erasesize, pnor->erasesize);
+		if (rc < 0) {
+			pr_log(LOG_ERR, "PNOR: read(0x%x bytes) failed: %m",
+					pnor->erasesize);
+			goto out;
+		}
 	}
 
 	/* Put data in the correct spot */
--- a/external/gard/gard.c
+++ b/external/gard/gard.c
@@ -511,7 +511,7 @@
 
 static int do_clear_i(struct gard_ctx *ctx, int pos, struct gard_record *gard, void *priv)
 {
-	int largest, rc = 0;
+	int largest = 0, rc = 0;
 	char *buf;
 	struct gard_record null_gard;
 
@@ -533,8 +533,6 @@
 			return rc;
 		}
 		printf("done\n");
-
-		largest = 0;
 	} else if (be32toh(gard->record_id) == *(uint32_t *)priv) {
 		largest = get_largest_pos(ctx);
 		if (largest < 0 || pos > largest) {
